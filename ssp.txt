1.Write a shell script program which accepts 5 different words from the command line and store them in a text file and display words in descending order.
#!/bin/bash
# check if 5 arguments are provided
if [ $# -ne 5 ]; then
  echo "error:please provide exactly 5 differenet word."
  exit 1
  fi

  output_file="words.txt"

  for word in "$@"; do
  echo "$word" >> "$output_file"
  done

  echo "words in desending order:"
  sort -r "$output_file"
  
2.Write a Shell Bash Script for evaluate the status of a file/directory.
#!/bin/bash
# test-file: Evaluate the status of a file
echo "hey what's the file/directory name";
read file
if [ -e "$file" ]; then
if [ -f "$file" ]; then
echo "$file is regular file."
fi
if [ -d "$file" ]; then
echo "$file is a directroy."
fi
if [ -r "$file" ]; then
echo "$file is a redable.";
fi
if [ -w "$file" ]; then
echo "$file is writable.";
fi
if [ -x "$file" ]; then
echo "$file is executable/serchable";
fi
else
echo "$file does not exist";
exit 1
fi
Exit

3.Modify the previous script to that it uses a logging function. Additionally, tag each syslog message with “randomly” and include process ID. Generate a 3 random numbers.
#!/bin/bash
function logging()
{

MESSAGE=$@
SET_MESSAGE="Random Number is:$MESSAGE"
echo "$SET_MESSAGE"
logger -i -p user.info "$SET_MESSAGE"
}
logging $RANDOM
logging $RANDOM
logging $RANDOM

4.Write a shell script which provide following facilities
   a. Comparison of two strings.
   b. Display reverse string.
#!/bin/bash

while true; do
    echo "select an option:"
    echo "1. compare two string"
    echo "2. display reverse string"
    echo "3.exit"
    read -p "enter your choice(1-3): " choice 
    case $choice in

    1)
    read -p "enter first string: " str1
    read -p "enter second string: " str2
    if [ "$str1" == "$str2" ]; then
    echo "the string is equal."
    else
    echo "the string is not equal."
    fi
    ;;

    2)
    read -p "enter a string to reverse: " str
    reversed=$(echo "$str" | rev)
    echo "reversed string: $reversed"
    ;;
    
    3)
    echo "exitinng the program."
    exit 0
    ;;

    *)
     echo "invalid option. please select a valid option."
     ;;
    esac
    done

5.Write a script that executes the command “cat/etc/shadow”. If the command return a 0 exit status, report “command succeeded” and exit with a 0 exit status. If the command returns a non-zero exit status, report “Command failed” and exit with a 1 exit status.
#!/bin/bash
cat /etc/shadow
if [ “$?” -eq “0” ]
then
echo “Command succeeded”
exit 0
else
echo “Command failed”
exit 1
fi

6.Develop a script that checks CPU and memory usage and logs the statistics to a file, including a  timestamp.
MAX=95
EMAIL=server@127.0.0.1
USE=$(grep'cpu'/proc/stat | awk'{usage=($2+$4)*100/($2+$4+$5)} END {print usage
""}')
if [ $USE -gt $MAX ]; then
echo "Percent used: $USE" | mail -s "Running out of CPU power" $EMAIL
fi

7.Write a Shell Bash Script for check if a provided number is Armstrong or not
#!/usr/bin/env bash
echo -n "Enter A Number:"
read -r n
arm=0
temp=$n
while [ "$n" -ne 0 ]; do
r=$((n % 10))
arm=$((arm + r * r * r))
n=$((n / 10))
done
echo $arm
if [ $arm -eq "$temp" ]; then
echo "Armstrong"
else
echo "Not Armstrong"
fi

8.Write a script that accepts a filename as an argument and checks if the file exists. If it exists,  display its size, modification date, and whether it’s a regular file or a directory.
#!/bin/bash

# Check if a filename is provided as an argument
if [ $# -eq 0 ]; then
  echo "Error: Please provide a filename as an argument."
  exit 1
fi

# Get the filename from the argument
filename="$1"

# Check if the file exists
if [ -f "$filename" ]; then
  # File exists
  echo "File: $filename"
  echo "Size: $(stat -c%s "$filename")"
  echo "Modified: $(stat -c%y "$filename")"
  echo "Type: Regular file"
elif [ -d "$filename" ]; then
  # Directory exists
  echo "Directory: $filename"
  echo "Size: $(du -sh "$filename" | awk '{print $1}')"
  echo "Modified: $(stat -c%y "$filename")"
  echo "Type: Directory"
else
  # File does not exist
  echo "Error: File '$filename' does not exist."
  exit 1
fi

9.Write a shell script to check whether the number is positive or negative. Also, display an error message if the number entered is Zero.
#!/bin/bash

# Prompt the user to enter a number
read -p "Enter a number: " number

# Check if the number is zero
if [ $number -eq 0 ]; then
  echo "Error: The number is zero."
  exit 1
fi

# Check if the number is positive
if [ $number -gt 0 ]; then
  echo "The number is positive."
else
  # If not positive, it must be negative
  echo "The number is negative."
fi

10.Write a script that reads a list of usernames from a file and creates each user on the system, setting   a default password for each.
#!/bin/bash

# Check if a filename is provided as an argument
if [ $# -eq 0 ]; then
  echo "Error: Please provide a filename containing usernames as an argument."
  exit 1
fi

# Get the filename from the argument
filename="$1"

# Check if the file exists
if [ ! -f "$filename" ]; then
  echo "Error: File '$filename' does not exist."
  exit 1
fi

# Loop through each line in the file
while read -r username; do
  # Create the user with a default password (replace 'password' with your desired default password)
  useradd -m -p $(openssl passwd -crypt password) "$username" 
  echo "User '$username' created."
done < "$filename"

echo "All users created successfully."

11.Write a Shell Bash Script for report server related information with linux os version.
#!/bin/bash

# Get the hostname
hostname=$(hostname)

# Get the operating system version
os_version=$(lsb_release -a | grep "Description" | awk '{print $2}')

# Get the number of CPU cores
cpu_cores=$(nproc)

# Get the total RAM in MB
total_ram=$(free -m | awk '/Mem:/ {print $2}')

# Get the available disk space in GB
disk_space=$(df -h / | awk '/\/$/{print $4}')

# Get the current date and time
date_time=$(date +"%Y-%m-%d %H:%M:%S")

# Print the report
echo "---------------------------------"
echo "Server Report"
echo "---------------------------------"
echo "Hostname: $hostname"
echo "OS Version: $os_version"
echo "CPU Cores: $cpu_cores"
echo "Total RAM: $total_ram MB"
echo "Disk Space: $disk_space GB"
echo "Date & Time: $date_time"
echo "---------------------------------"

12.Write a script that takes two numbers and an operator (+, -, *, /) as arguments and performs the calculation, displaying the result.
#!/bin/bash

# Check if the correct number of arguments is provided
if [ $# -ne 3 ]; then
  echo "Error: Please provide two numbers and an operator (+, -, *, /)."
  exit 1
fi

# Get the arguments
num1=$1
num2=$2
operator=$3

# Perform the calculation based on the operator
case $operator in
  +)
    result=$(($num1 + $num2))
    ;;
  -)
    result=$(($num1 - $num2))
    ;;
  \*)
    result=$(($num1 * $num2))
    ;;
  /)
    if [ $num2 -eq 0 ]; then
      echo "Error: Division by zero is not allowed."
      exit 1
    fi
    result=$(($num1 / $num2))
    ;;
  *)
    echo "Error: Invalid operator. Please use +, -, *, or /."
    exit 1
    ;;
esac

# Display the result
echo "$num1 $operator $num2 = $result"

13.write a shell script that prompts the user for a name of a file or directory and reports if it is a regular file, a directory, or another type of file. Also perform an ls command against the file or directory with the long listing option.
#!/bin/bash

# Prompt the user for a file or directory name
read -p "Enter a file or directory name: " filename

# Check if the file exists
if [ ! -e "$filename" ]; then
  echo "Error: File or directory '$filename' does not exist."
  exit 1
fi

# Check the file type
if [ -f "$filename" ]; then
  echo "$filename is a regular file."
elif [ -d "$filename" ]; then
  echo "$filename is a directory."
elif [ -L "$filename" ]; then
  echo "$filename is a symbolic link."
else
  echo "$filename is of an unknown type."
fi

# Perform an ls -l command on the file or directory
echo "Listing contents of $filename:"
ls -l "$filename"

14.Write a Shell Bash Script to show CPU temperature with memory usage.
#!/bin/bash

# Get CPU temperature (assumes lm-sensors is installed)
cpu_temp=$(sensors | grep "Core 0" | awk '{print $2}' | cut -d'+' -f1)

# Get memory usage
mem_usage=$(free -m | awk '/Mem:/ { print $3/$2 * 100 }')

# Display the information
echo "CPU Temperature: $cpu_temp °C"
echo "Memory Usage: $mem_usage%"

15.Write a shell script which provide following facilities
    c. Count the total length of the string.
    d. Convert upper to lower or vice versa.
#!/bin/bash

# Prompt the user for input
read -p "Enter a string: " input_string

# 1. Count the total length of the string
string_length=${#input_string}
echo "Length of the string: $string_length"

# 2. Convert upper to lower or vice versa
read -p "Convert to (u)ppercase or (l)owercase? " choice

if [[ $choice == "u" ]]; then
  output_string=$(echo "$input_string" | tr '[:lower:]' '[:upper:]')
  echo "Converted to uppercase: $output_string"
elif [[ $choice == "l" ]]; then
  output_string=$(echo "$input_string" | tr '[:upper:]' '[:lower:]')
  echo "Converted to lowercase: $output_string"
else
  echo "Invalid choice."
fi


16.Write a shell script that takes a filename as an argument and checks if the file exists. If it exists, output "File exists," and if not, output "File does not exist."
#!/bin/bash

# Check if a filename is provided as an argument
if [ $# -eq 0 ]; then
  echo "Error: Please provide a filename as an argument."
  exit 1
fi

filename="$1"

# Check if the file exists
if [ -e "$filename" ]; then
  echo "File exists."
else
  echo "File does not exist."
fi

17.Write a Shell Bash Script for check if a number input from standard input is odd or even.
#!/bin/bash

# Prompt the user for a number
read -p "Enter a number: " number

# Check if the number is even
if (( $number % 2 == 0 )); then
  echo "The number $number is even."
else
  echo "The number $number is odd."
fi

18.Write a Shell Bash Script for convert Decimal Number to Binary
#!/bin/bash

# Prompt the user for a decimal number
read -p "Enter a decimal number: " decimal

# Convert the decimal number to binary
binary=$(echo "obase=2; $decimal" | bc)

# Display the binary equivalent
echo "Binary equivalent: $binary"

19.write a shell script that prompts the user for a name of a file or directory and reports if it is a regular file, a directory, or another type of file. Also perform an ls command against the file or directory with the long listing option.
#!/bin/bash

# Prompt the user for a file or directory name
read -p "Enter a file or directory name: " filename

# Check if the file exists
if [ ! -e "$filename" ]; then
  echo "Error: File or directory '$filename' does not exist."
  exit 1  # Exit the script if the file doesn't exist
fi

# Check the file type
if [ -f "$filename" ]; then
  echo "$filename is a regular file."
elif [ -d "$filename" ]; then
  echo "$filename is a directory."
elif [ -L "$filename" ]; then
  echo "$filename is a symbolic link."
else
  echo "$filename is not a regular file, directory, or symbolic link."
fi

# Perform an ls -l command on the file or directory
echo "Listing contents of $filename:"
ls -l "$filename"

20.Write a Shell Bash Script for check if a provided number is Armstrong or not.
#!/bin/bash

# Prompt the user for a number
read -p "Enter a number: " number

# Calculate the number of digits
digits=$(echo $number | wc -c)

# Initialize the sum of the cubes of digits
sum=0

# Loop through each digit
for (( i=0; i<$digits; i++ )); do
  digit=$(echo $number | cut -c$(($i+1)) )
  sum=$(( $sum + $digit**3 ))
done

# Check if the sum is equal to the original number
if [ $sum -eq $number ]; then
  echo "The number $number is an Armstrong number."
else
  echo "The number $number is not an Armstrong number."
fi

21.Write a shell script that displays “man”,”bear”,”pig”,”dog”,”cat”,and “sheep” on the screen with  each appearing on a separate line. Try to do this in as few lines as possible.
echo -e "man\nbear\npig\ndog\ncat\nsheep"

22.Write a script that accepts a filename as an argument and checks if the file exists. If it exists, display its size, modification date, and whether it’s a regular file or a directory.
#!/bin/bash

# Check if a filename is provided as an argument
if [ $# -eq 0 ]; then
  echo "Error: Please provide a filename as an argument."
  exit 1
fi

filename="$1"

# Check if the file exists
if [ ! -e "$filename" ]; then
  echo "Error: File '$filename' does not exist."
  exit 1
fi

# Get file size
size=$(stat -c%s "$filename")
echo "Size: $size bytes"

# Get modification date
date=$(stat -c%y "$filename")
echo "Modification Date: $date"

# Check file type
if [ -f "$filename" ]; then
  echo "File Type: Regular file"
elif [ -d "$filename" ]; then
  echo "File Type: Directory"
fi