## Functions
### 1. Introduction to Using Functions
```python
# Function to calculate the square of a number
def square(number):
	return number * number

print(square(4))
**************************************************
### 2. Standard Mathematical Functions
```python
# Using math library
import math
number = 16
print(f"Square root of {number}: {math.sqrt(number)}")
****************************************************************
### 3. Time Functions
import time
start_time = time.time() # Records the start time
for i in range(1000000): # Loops through 1,000,000 iterations
	pass # Empty loop (does nothing)
end_time = time.time() # Records the end time
# Prints the execution time by subtracting the start time from the end time
print(f"Execution time: {end_time - start_time} seconds")
************************************************************************
### 4. Random Numbers
```python
# Generate random numbers
import random
print(random.randint(1, 100))
********************************************************************
### 5. Function Basics
```python
# Function to add two numbers
def add(a, b):
	return a + b
print(add(3, 5))
*********************************************************************
### 6. Using Functions Main Function*
```python
# Main function example
def main():
	print("This is the main function")

if __name__ == "__main__":
	main()
************************************************************************
### 7. Parameter Passing
```python
# Function with parameters
def greet(name):
	print(f"Hello, {name}!")
greet("Alice")
************************************************************************
### 8. Function Examples
#### Better Organized Prime Generator
```python
# Prime number generator
def is_prime(num):
	if num < 2:
		return False
for divisor in range(2, int(num**0.5) + 1):
	if num % divisor == 0:
		return False
	return True
def generate_primes(start, end):
	primes = []
	for num in range(start, end + 1):
		if is_prime(num):
			primes.append(num)
	return primes
print(generate_primes(10, 50))
****************************************************************
#### Command Interpreter
```python
# Simple command interpreter
def interpreter(command):
	if command == "start":
		print("System starting...")
	elif command == "stop":
		print("System stopping...")
	else:
		print("Unknown command")
interpreter("start")
```
#### Restricted Input
```python
# Input validation
def get_positive_number():
while True:
	try:
		num = int(input("Enter a positive number: "))
		if num > 0:
			return num
		else:
			print("Number must be positive.")
	except ValueError:
		print("Invalid input. Please enter a number.")
print(get_positive_number())
**********************************************************
### 9. Recursion
#### Making Functions Reusable
```python
# Factorial using recursion
def factorial(n):
	if n == 0:
		return 1
	return n * factorial(n - 1)
print(factorial(5))
*****************************************************
#### Documenting Functions and Modules
```python
# Example with docstrings
def add(a, b):
	"""Returns the sum of two numbers."""
	return a + b
print(add(3, 4))
print(add.__doc__)
****************************************************
#### Functions as Data
# Passing functions as arguments
def apply_function(func, value):
	return func(value)
def square(n):
	return n * n
print(apply_function(square, 5))
*****************************************************
## Lists
### 1. Using Lists
# Basic list operations
fruits = ["apple", "banana", "cherry"]
fruits.append("date")
print(fruits)
********************************************
### 2. List Assignment and Equivalence
# Demonstrating shallow copy
list1 = [1, 2, 3]
list2 = list1
list2.append(4)
print(list1) # Both lists change
********************************************
### 3. List Bounds
# Handling index errors
numbers = [10, 20, 30]
try:
	print(numbers[5])
except IndexError:
	print("Index out of bounds")
***********************************************
### 4. Slicing
# List slicing
numbers = [1, 2, 3, 4, 5]
print(numbers[1:4])
*************************************************

### 5. Lists and Functions
# Passing lists to functions
def square_elements(lst):
	return [x * x for x in lst]
print(square_elements([1, 2, 3, 4]))
********************************************
### 6. Prime Generation with a List
# Store primes in a list
def generate_primes(n):
	primes = []
	for num in range(2, n + 1):
		for divisor in range(2, int(num**0.5) + 1):
			if num % divisor == 0:
				break
			else:
				primes.append(num)
	return primes
print(generate_primes(50))
***************************************************
### 7. List Processing
# Filtering even numbers
def filter_evens(numbers):
	return [num]
**************************************
###7 Sorting a List (Bubble Sort)

1 # Bubble sort
def bubble_sort(lst):
	n = len(lst)
	for i in range(n):
		for j in range(n-i-1):
			if lst[j] > lst[j+1]:
				lst[j], lst[j+1] = lst[j+1], lst[j]
	return lst
print("Sorted List:", bubble_sort([5, 2, 9, 1, 5]))
************************************************************************************
Objects are instances of classes and are fundamental in Python's
object-oriented programming paradigm.
### Example: Creating and Using an Object
# Define a simple class
class Dog:
	def __init__(self, name, age):
		self.name = name
		self.age = age
	def bark(self):
		return f"{self.name} says Woof!"
# Create an object
my_dog = Dog("Buddy", 3)
# Access attributes and methods
print(my_dog.name) # Output: Buddy
print(my_dog.bark()) # Output: Buddy says Woof!
*******************************************************************
## String Objects
Python strings are immutable objects. They come with numerous built-in
methods for manipulation.
### Example: String Methods
# Create a string object
s = "Hello, World!"
# Accessing string methods
print(s.lower()) # Output: hello, world!
print(s.upper()) # Output: HELLO, WORLD!
print(s.replace("World", "Python")) # Output: Hello, Python!
print(s.split(", ")) # Output: ['Hello', 'World!']
# String slicing
print(s[0:5]) # Output:Hello
******************************************
## List Objects
Lists are mutable objects in Python and can hold items of different data types.
They also have several methods for data manipulation.
### Example: List Methods
# Create a list object
fruits = ["apple", "banana", "cherry"]
# Accessing list methods
fruits.append("date")
print(fruits) # Output: ['apple', 'banana', 'cherry', 'date']
fruits.remove("banana")
print(fruits) # Output: ['apple', 'cherry', 'date']
fruits.sort()
print(fruits) # Output: ['apple', 'cherry', 'date']
# Accessing elements
print(fruits[0]) # Output: apple
print(fruits[-1]) # Output: date
# Slicing a list
print(fruits[1:]) # Output: ['cherry', 'date']
*********************************************************
### Example: Nested Lists
# Create a nested list
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# Accessing elements in a nested list
print(matrix[0]) # Output: [1, 2, 3]
print(matrix[1][1]) # Output: 5
# Iterating through a nested list
for row in matrix:
	print(row)
****************************************
Create a BankAccount class with deposit and withdraw methods.
Implement balance checking before withdrawal.
class BankAccount:
	def __init__(self, owner, balance=0):
		self.owner = owner
		self.balance = balance
	def deposit(self, amount):
		self.balance += amount
		print(f"Deposited: {amount}, New Balance:{self.balance}")

	def withdraw(self, amount):
		if amount > self.balance:
			print("Insufficient funds!")
		else:
			self.balance -= amount
			print(f"Withdrawn: {amount}, New Balance:
{self.balance}")
acc = BankAccount("John Doe", 500)
acc.deposit(200)
acc.withdraw(100)
acc.withdraw(700) # Should show "Insufficient funds!"
*********************************************************************
Create an Abstract Class Shape with an abstract method area(), then
implement Circle and Rectangle.
from abc import ABC, abstractmethod
class Shape(ABC):
	#@abstractmethod
	def area(self):
		pass
class Circle(Shape):
	def __init__(self, radius):
		self.radius = radius
	def area(self):
		return 3.14 * self.radius * self.radius
class Rectangle(Shape):
	def __init__(self, length, width):
		self.length = length
		self.width = width
	def area(self):
		return self.length * self.width
c = Circle(7)
r = Rectangle(5, 10)
print("Circle Area:", c.area())
print("Rectangle Area:", r.area())

*********************************************************************
Implement a Stack ADT using a Python class with push(), pop(), and
peek() methods.
class Stack:	
	def __init__(self):
		self.items = []
	def push(self, item):
		self.items.append(item)
	def pop(self):
		if not self.is_empty():
			return self.items.pop()
		return "Stack is empty"
	def peek(self):
		if not self.is_empty():
			return self.items[-1]
		return "Stack is empty"
	def is_empty(self):
		return len(self.items) == 0
s = Stack()
s.push(10)
s.push(20)
print("Top:", s.peek())
print("Popped:", s.pop())
print("Popped:", s.pop())
print("Popped:", s.pop()) # Should display "Stack is empty"
********************************************************************************************

Tuple
Create a tuple, access elements, and perform slicing
operations.
my_tuple = (10, 20, 30, 40, 50)
print("Tuple:", my_tuple)
print("First element:", my_tuple[0])
print("Last element:", my_tuple[-1])
print("Slice [1:4]:", my_tuple[1:4])
Write a program to find the maximum and minimum values in a tuple.
numbers = (5, 2, 8, 1, 9, 7)
print("Max:", max(numbers))
print("Min:", min(numbers))
Convert a tuple to a list and modify its elements.
my_tuple = (1, 2, 3, 4, 5)
my_list = list(my_tuple)
my_list.append(6)
print("Modified List:", my_list)
**************************************************************
Set
Create a set, add elements, and remove an element.
my_set = {1, 2, 3, 4, 5}
my_set.add(6)
my_set.remove(2)
print("Set after modifications:", my_set)
******************************************************************
Find the union, intersection, and difference of two sets.
set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}
print("Union:", set1 | set2)
print("Intersection:", set1 & set2)
print("Difference:", set1 - set2)
********************************************************
Check if an element is present in a set.
my_set = {10, 20, 30, 40, 50}
print(30 in my_set) # True
print(100 in my_set) # False
********************************************
Dictionary
##Create a dictionary and print keys and values.
student = {"name": "Alice", "age": 21, "marks": 85}
print("Keys:", student.keys())
print("Values:", student.values())
print("Name:", student["name"])
*************************************************************
Write a program to update an existing dictionary.
student = {"name": "Alice", "age": 21, "marks": 85}
student["marks"] = 90 # Updating value
student["city"] = "New York" # Adding new key-value pair
print("Updated Dictionary:", student)
***************************************************************
##Find the frequency of words in a given string using a
dictionary.
text = "apple banana apple orange banana apple"
words = text.split()
freq_dict = {}
for word in words:
	freq_dict[word] = freq_dict.get(word, 0) + 1
print("Word Frequency:", freq_dict)
**************************************************************
Simple Algorithms
Find the factorial of a number using recursion.
def factorial(n):
	if n == 0 or n == 1:
		return 1
	return n * factorial(n - 1)
num = 5
print("Factorial of", num, "is", factorial(num))
*************************************************************
Find whether a number is prime or not.
def is_prime(n):
	if n < 2:
		return False
	for i in range(2, int(n ** 0.5) + 1):
		if n % i == 0:
			return False
	return True
num = 29
print(num, "is Prime:", is_prime(num))
Fibonacci series using recursion.
def fibonacci(n):
	if n <= 1:
		return n
	return fibonacci(n - 1) + fibonacci(n - 2)
num = 6
for i in range(num):
	print(fibonacci(i), end=" ")
*****************************************************************
Data Structures
Stack (Using List)
##Implement a stack with push and pop operations.
class Stack:
	def __init__(self):
		self.items = []
	def push(self, item):
		self.items.append(item)
	def pop(self):
		if not self.is_empty():
			return self.items.pop()
		return "Stack is empty"
	def is_empty(self):
		return len(self.items) == 0
s = Stack()
s.push(10)
s.push(20)
print("Popped:", s.pop())
print("Popped:", s.pop())
print("Popped:", s.pop()) # Should display "Stack is
empty"
***************************************************************
Queue (Using List)
Implement a queue using a list with enqueue and dequeue operations.
class Queue:
	def __init__(self):
		self.items = []
	def enqueue(self, item):
		self.items.append(item)
	def dequeue(self):
		if not self.is_empty():
			return self.items.pop(0)
		return "Queue is empty"
	def is_empty(self):
		return len(self.items) == 0
q = Queue()
q.enqueue(1)
q.enqueue(2)
print("Dequeued:", q.dequeue())
print("Dequeued:", q.dequeue())
print("Dequeued:", q.dequeue()) # Should display "Queue
is empty"
****************************************************************
Linear Search
Write a program to implement Linear Search.
def linear_search(arr, target):
	for i in range(len(arr)):
		if arr[i] == target:
			return i
	return -1
numbers = [10, 20, 30, 40, 50]
target = 30
result = linear_search(numbers, target)
print(f"Element {target} found at index {result}" if
result != -1 else "Element not found")
********************************************************************
Binary Search
Write a program to implement Binary Search.
def binary_search(arr, target):
	low, high = 0, len(arr) - 1
	while low <= high:
		mid = (low + high) // 2
		if arr[mid] == target:
			return mid
		elif arr[mid] < target:
			low = mid + 1
		else:
			high = mid - 1
	return -1
numbers = [10, 20, 30, 40, 50]
target = 30
result = binary_search(numbers, target)
print(f"Element {target} found at index {result}" if
result != -1 else "Element not found")
************************************************************************
Exception Examples
Handling Division by Zero Exception
try:
	num1 = int(input("Enter numerator: "))
	num2 = int(input("Enter denominator: "))
	result = num1 / num2
	print("Result:", result)
except ZeroDivisionError:
	print("Error: Cannot divide by zero!")
*****************************************************************************
Handling Multiple Exceptions (ValueError & ZeroDivisionError)
try:
	num1 = int(input("Enter a number: "))
	num2 = int(input("Enter another number: "))
	result = num1 / num2	
	print("Result:", result)
except ZeroDivisionError:
	print("Error: Division by zero is not allowed.")
except ValueError:
	print("Error: Invalid input. Please enter integers only.")
********************************************************************************
Handling FileNotFoundError
try:
	file = open("non_existent_file.txt", "r")
	print(file.read())
except FileNotFoundError:
	print("Error: File not found!")
*****************************************************************
Using Exceptions
Handling Exception with finally Block
try:
	file = open("example.txt", "r")
	print(file.read())
except FileNotFoundError:
	print("Error: File not found!")
finally:
	print("Execution Completed.")
****************************************************
Using else with Exception Handling
try:
	num = int(input("Enter a number: "))
	print(f"Square of {num} is {num ** 2}")
except ValueError:
	print("Error: Invalid input, enter a number.")
else:	
	print("No exception occurred, successful execution.")
***********************************************************************
Catching All Exceptions (Generic Exception Handling)
try:
	value = int(input("Enter a number: "))
	print(10 / value)
except Exception as e:
	print("An error occurred:", e)
*****************************************************************
Custom Exceptions
Practical Programs (10-15 Marks Each)
##Creating a Custom Exception for Negative
Numbers
class NegativeNumberError(Exception):	
	pass
try:
	num = int(input("Enter a positive number: "))
	if num < 0:
		raise NegativeNumberError("Error: Negative number entered!")
	print("You entered:", num)
except NegativeNumberError as e:
	print(e)
********************************************************************
##Custom Exception for Age Validation
class InvalidAgeError(Exception):
	def __init__(self, message="Age must be between 18 and 100"):
		self.message = message
		super().__init__(self.message)
try:
	age = int(input("Enter your age: "))
	if age < 18 or age > 100:
		raise InvalidAgeError()
	print("Valid age entered:", age)
except InvalidAgeError as e:
	print(e)
**************************************************************
Bank Withdrawal Custom Exception
--------------------------------------------------------------------------------------------------------
# Custom Exception
class InsufficientFundsError(Exception):
	def __init__(self, message="Withdrawal amount exceeds available balance."):
		self.message = message
		super().__init__(self.message)
# Bank Account Class
class BankAccount:
	def __init__(self, account_holder, balance=0):
		self.__account_holder = account_holder
		self.__balance = balance
	def deposit(self, amount):
		if amount > 0:
			self.__balance += amount
			print(f"Deposited: {amount}. New Balance: {self.__balance}")
		else:
			print("Invalid deposit amount.")
	def withdraw(self, amount):
		if amount <= 0:
			print("Invalid withdrawal amount.")
		elif amount > self.__balance:
			raise InsufficientFundsError(f"Attempted to withdraw {amount},but only {self.__balance} is available.")
		else:
			self.__balance -= amount
			print(f"Withdrawn: {amount}. New Balance: {self.__balance}")	
	def get_balance(self):
		return self.__balance
	def display_account_info(self):
		print(f"Account Holder: {self.__account_holder}")
		print(f"Current Balance: {self.__balance}")
# Main Program
def main():
	account = BankAccount("John Doe", 1000)
	account.display_account_info()
	account.deposit(500)
try:
	amount = float(input("Enter amount to withdraw: "))
	account.withdraw(amount)
except InsufficientFundsError as e:
	print("Withdrawal failed:", e)
except ValueError:
	print("Invalid input. Please enter a numeric value.")
print("Final Balance:", account.get_balance())
if __name__ == "__main__":
	main()